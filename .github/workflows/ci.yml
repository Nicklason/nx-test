name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  branch-info:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.2
      - name: Get base branch name
        id: get-base-branch-name
        run: |
          if [[ "${{github.event.pull_request.base.ref}}" != "" ]]; then
            echo "::set-output name=branch::${{github.event.pull_request.base.ref}}"
          else
            echo "::set-output name=branch::main"
          fi
    outputs:
      base-branch-name: ${{ steps.get-base-branch-name.outputs.branch }}
      branch-name: ${{ steps.branch-name.outputs.current_branch }}
  get-affected:
    needs: [branch-info]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: ${{needs.branch-info.outputs.base-branch-name}}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Install dependencies
        run: npm ci
      - name: Get affected
        id: get-projects-arrays
        run: |
          echo "::set-output name=unit-test::$(npx nx print-affected --target=test --select=tasks.target.project | sed 's/ //g' | jq -c 'split(",")')"
      - name: print affected
        run: npx nx print-affected --target=test --select=tasks.target.project | sed 's/ //g' | jq -c 'split(",")'"
    outputs:
      unit-test: ${{ steps.get-projects-arrays.outputs.unit-test }}
  thingy:
    runs-on: ubuntu-latest
    needs: [get-affected]
    steps:
      - name: test
        run: |
          echo "${{ needs.get-affected.outputs.unit-test }}"
  unit-test:
    runs-on: ubuntu-latest
    needs: [get-affected]
    if:  ${{ fromJson(needs.get-affected.outputs.unit-test)[0] }}
    strategy:
      max-parallel: 4
      matrix:
        node: ["18.x", "16.x"]
        projectName: ${{fromJson(needs.get-affected.outputs.unit-test)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: npm ci
      - name: Test unit
        run: npx nx test ${{ matrix.projectName }}
  build-finished:
    runs-on: ubuntu-latest
    needs: [unit-test]
    if: |
      always() &&
      (needs.unit-test.result == 'success' || needs.unit-test.result == 'skipped')
    steps:
      - name: Trace
        run: echo "All jobs finished"
